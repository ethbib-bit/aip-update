#number of records to be processed for ingest
#deactivating can be done using 0
queue.maxrecords.ingest = 0
#number of records to be processed for aipupdate
#deactivating can be done using 0
queue.maxrecords.update = 0
#activate (1) or deactivate (0) postaipupdate
#includes DC update, sftp cleanup
queue.postaipupdate = 0
#activate (1) or deactivate (0) if older duplicate FEEDER_UPDATED records
#of same SIP_NAME should be removed
queue.cleanup.upt-duplicate = 0
#max number of items delete per local and SFTP cleanup run (reduce I/O)
queue.fstatus.sftp.maxitems = 0
#activate (1) or deactivate (0) deletion
queue.delete = 0

#seconds between each update request to prevent "control locked" errors
control.update.waiting = 10

# DB connection
db.drivername = oracle.jdbc.driver.OracleDriver
db.connectionurl = jdbc:oracle:thin:@rossa-test.ethz.ch:1521:dps
db.username =
db.password =

#SFTP
sftp.host =
sftp.port =
sftp.user =
sftp.password =
sftp.homedir =

# DB query section
query.table.tracking = V2L1_ROS00.INGEST_TRACKING_RECORD_E_PUB
query.table.queue = V2L1_ROS00.INGEST_TRACKING_RECORD_E_PUB_Q
query.oracle.timeformat = yyyy-mm-dd hh24:mi:ss
query.java.timeformat = yyyyMMdd-HH:mm:ss

# Rosetta Webservive URL
webservice.url = ""

# Rosetta Webservice connection via PDS
webservice.pdsHost = ""
webservice.pdsUser = ""
webservice.pdsPassword = ""
webservice.pdsInstitute = ""
webservice.pdsCaller = ""

#Parsing mets from Rosetta webservice
metsparser.allfiles = /mets/structMap//div[@TYPE='FILE']/fptr[@FILEID]
metsparser.file.md5 = /mets/amdSec[@ID='#FILEID#-amd']/techMD/mdWrap/xmlData/dnx/section[@id='fileFixity']/record[key='MD5']/key[@id='fixityValue']
metsparser.file.name = /mets/amdSec[@ID='#FILEID#-amd']/techMD/mdWrap/xmlData/dnx/section[@id='generalFileCharacteristics']/record/key[@id='fileOriginalName']
metsparser.file.extension = /mets/amdSec[@ID='#FILEID#-amd']/techMD/mdWrap/xmlData/dnx/section[@id='generalFileCharacteristics']/record/key[@id='fileExtension']
metsparser.file.size = /mets/amdSec[@ID='#FILEID#-amd']/techMD/mdWrap/xmlData/dnx/section[@id='generalFileCharacteristics']/record/key[@id='fileSizeBytes']
metsparser.file.originalpath = /mets/amdSec[@ID='#FILEID#-amd']/techMD/mdWrap/xmlData/dnx/section[@id='generalFileCharacteristics']/record/key[@id='fileOriginalPath']
metsparser.rosetta.reppid = /mets/fileSec/fileGrp[1]/@ID
metsparser.rosetta.iepid = /mets/amdSec/techMD[@ID='ie-amd-tech']/mdWrap/xmlData/dnx/section[@id='internalIdentifier']/record/key[@id='internalIdentifierType' and text()='PID']/following-sibling::key[@id='internalIdentifierValue']
metsparser.ie.dc = /mets/dmdSec[@ID='ie-dmd']/mdWrap[@MDTYPE='DC']/xmlData/record/*
metsparser.file.dc = /mets/dmdSec[@ID='#FILEID#-dmd']/mdWrap[@MDTYPE='DC']/xmlData/record/*

#get update records, external file because syntax is too complex
queue.updt.file = /conf/find-updates.sql

#tracking table
tracking.workspaceid = ReColl

#tracking IE finished
tracking.ie.finished = FINISHED

#tracking status progression
tracking.status.finished = FEEDER_SUBMITTED
tracking.status.new = NEWFROMQUEUE
tracking.status.copyingfiles = COPYINGFILES

#queue status from dspace
queue.status.new = FEEDER_SUBMITTED
queue.status.update = FEEDER_UPDATED
queue.status.deleted = FEEDER_DELETED

#status while files are copied into ingest location
queue.status.startedcopy = FILE_COPY_STARTED
#status when items is preingested into Rosetta
queue.status.preingested = FEEDER_PREINGESTED
#error while running file aip-updates
queue.status.error.aip = AIP_UPDATE_ERROR
#error while running meta data updates
queue.status.error.md = MD_UPDATE_ERROR
#control locked error that only gives a warning
queue.status.error.locked = CONTROL_LOCKED_ERROR
#status that file aip-updates are sent to Rosetta with RIPID returned
queue.status.waitie = AIP_UPDATE_WAITING
#final status for updates when meta data has successfully transmitted
queue.status.finished = AIP_FINISHED
#error status of deleted items
queue.status.deleted.error = FEEDER_DELETED_ERROR
#queue status for duplicate updates to be removed from SFTP
queue.status.update.duplicate = FEEDER_UPDT_DUPLICATE
#error queue status unique constraint
queue.status.error.unique = UNIQUE_CONSTRAINT_ERROR
#file system status when working directory and sftp not clean
queue.fstatus.wdnotclean = WD_NOT_CLEAN
#file system status when only sftp not clean
queue.fstatus.sftpnotclean = SFTP_NOT_CLEAN
#file system status when every is cleaned up
queue.fstatus.clean = CLEAN
#file system status days to stay on file system
queue.fstatus.numberofdays = 7

#constant for tracking table
tracking.siptype = IE

#source with timestamp
storage.ingest = /deposit_storage/e_publications/ingest/
storage.update =

#paths to files or folder inside the copied SIP
storage.sip.relativeiepath = content/ie.xml
storage.sip.relativestreamspath = content/streams/

#file name of mets that is extracted for each update package
storage.file.metsupdate = mets-from-rosetta.xml
#file name for ie mets in post-aip
storage.file.metspostupdate = mets-from-rosetta-post.xml

#dnxdelete section that get replaced
dnxdelete.entitytype.search = '<key id="IEEntityType">ResearchColl</key>'
dnxdelete.entitytype.replace = '<key id="IEEntityType">ResearchColl_Deleted</key>'

#dc update header and footer that are required to enclose dc
dcupdate.header = '<mets:mets xmlns:mets="http://www.loc.gov/METS/"><mets:dmdSec ID="ie-dmd"><mets:mdWrap MDTYPE="DC"><mets:xmlData><dc:record xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'
dcupdate.footer = '</dc:record></mets:xmlData></mets:mdWrap></mets:dmdSec></mets:mets>'
dcupdate.ie.type = 'descriptive'
dcupdate.ie.subtype = 'dc'

#file dc metadata
#files where no dc meta data update should be done (filedc.ignorefiles = file1, file2, file3)
filedc.ignorefiles = mets.xml
#node name that should be update for each file
filedc.dcupdate.node1 = dc:rights
